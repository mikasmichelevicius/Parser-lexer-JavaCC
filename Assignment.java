/* Generated By:JavaCC: Do not edit this line. Assignment.java */
import java.util.*;

public class Assignment implements AssignmentConstants {

  static Boolean mainExists = false;
  static int lineNumber = 0;

  static Map<String, List<String>> functionsMap = new HashMap<String, List<String>>();
  static Map<String, Integer> callExists = new HashMap<String, Integer>();
  static List<String> postFix = new ArrayList<String>();
  static Stack<String> stack = new Stack<String>();
  static Stack<Integer> calc = new Stack<Integer>();
  static Stack<ArrayList<String>> functionCalls = new Stack<ArrayList<String>>();

  public static void main(String args [])   {

    try {
      Assignment parser = new Assignment(System.in);
      parser.StartAnalyzer();
      System.out.println("PASS");
    } catch (ParseException e) {
      System.out.println("FAIL");
      analyseError(e);
    } catch(TokenMgrError e) {
      System.out.println("FAIL");
      System.err.println(e.getMessage());
      System.exit(0);
    }

    expressionToString(functionsMap.get("MAIN"), null, "MAIN");
    finishPostfix();
    int result = calculateResult();

    System.out.println(result);

   }

   public static void analyseError(ParseException e){
    Token currTok = e.currentToken;
    String message = e.toString();
    int one = message.indexOf("Was expecting:");
    int few = message.indexOf("Was expecting one of:");
    String expTok="";
    int index = 0;
    if (one > -1){
      index = one + 14;
    } else if (few > -1){
      index = few + 21;
    }
    int expectIndex = index;
    Boolean token = false;
    while (index<message.length()){
      if (message.charAt(index)=='<'){
        token = true;
        index++;
      }
      if (message.charAt(index)=='>'){
        token=false;
        break;
      }
      if (token) {
        expTok = expTok + message.charAt(index);
      }
      index++;
    }

    Token errTok = getNextToken();
    int errLine = errTok.beginLine;
    int errColumn = errTok.beginColumn;

    if (errColumn==1){
      System.err.println(errLine + "\u005cnError. Keyword DEF is either missing or spelled incorrectly.");
    } else if (expTok.equals("PARAM_NAME")){
      System.err.println(errLine + "\u005cnError. Function is missing a parameter.");
    } else if (expTok.equals("FUNC_NAME")){
      System.err.println(errLine + "\u005cnError. Function is either missing or spelled incorrectly.");
    } else if (e.currentToken.kind == 5){
      System.err.println(errLine + "\u005cnError. Function parameter is spelled incorrectly.");
    }else if (message.indexOf("{", expectIndex) > -1 ){
      System.err.println(errLine + "\u005cnError. Curly brackets must open function body.");
    } else if (message.indexOf("}", expectIndex) > -1 ){
      System.err.println(errLine + "\u005cnError. Curly bracets must close function body.");
    } else if (message.indexOf(";") > -1 ){
      System.err.println(errLine + "\u005cnError. Semicolon must end the line.");
    } else if (message.indexOf("\u005c" \u005c"", expectIndex) > -1){
      System.err.println(errLine + "\u005cnError. Space is missing in column " + errColumn + ".");
    }
    System.exit(0);
   }

   public static int calculateResult(){
    int op1, op2;
    for (int i=0; i<postFix.size(); i++){
      if(postFix.get(i).matches("[0-9]+")){
        calc.push(Integer.parseInt(postFix.get(i)));
      }
      if(postFix.get(i).equals("+")){
        op1 = calc.pop();
        op2 = calc.pop();
        calc.push(op1+op2);
      }
      if(postFix.get(i).equals("*")){
        op1 = calc.pop();
        op2 = calc.pop();
        calc.push(op1*op2);
      }
    }
    return calc.pop();
   }

   public static void expressionToString(List<String> expression, List<String> arg, String current){

    if (arg != null){
      int argSize = arg.size();
      List<String> replacedArg = new ArrayList<String>();
      for (int i=0; i<expression.size(); i++){
        replacedArg.add(expression.get(i));
        if (expression.get(i).matches("[a-z]+")){
          replacedArg.remove(replacedArg.size()-1);
          if (argSize>1){
            replacedArg.add("(");
          }
          for (int j=0; j<argSize; j++){
            replacedArg.add(arg.get(j));
          }
          if (argSize>1){
            replacedArg.add(")");
          }
        }
      }
      expressionToString(replacedArg,null,current);

    } else {
      for(int i=0; i<expression.size(); i++){

        if (expression.get(i).matches("[A-Z]+")){
          ArrayList<String> call = new ArrayList<String>();
          call.add(current);
          call.add(expression.get(i));
          if(functionCalls.empty()){
            functionCalls.push(call);
          } else {
            if (functionCalls.search(call) > -1){
              System.out.println("DIVERGENCE");
              System.exit(0);
            } else {
              functionCalls.push(call);
            }
          }

          List<String> argument = new ArrayList<String>();
          String function = expression.get(i);
          int openbrac = 1;
          updatePostfix("(");
          int j=i+2;
          while(true){
            if (expression.get(j).equals(")")){
              openbrac--;
              if (openbrac==0){
                break;
              }
            }
            if (expression.get(j).equals("(")){
              openbrac++;
            }
            argument.add(expression.get(j));
            j++;
          }
          expressionToString(functionsMap.get(function), argument, function);
          i=j;
          updatePostfix(")");
          functionCalls.pop();

        } else {
          updatePostfix(expression.get(i));
        }
      }
    }
   }

   public static void finishPostfix(){
    while(!stack.empty()){
      postFix.add(stack.pop());
    }
   }

   public static void updatePostfix(String value){

     if (value.matches("[0-9]+")){
       postFix.add(value);
     } else {
      if (value.equals("+") || value.equals("*")){

        if (stack.empty()){
          stack.push(value);

        } else if (value.equals("*")){
          stack.push(value);

        } else if (value.equals("+")){

          if (stack.peek().equals("+") || stack.peek().equals("(")){
            stack.push(value);
          } else {
            while(!stack.empty()){
              if (stack.peek().equals("*")){
                postFix.add(stack.pop());
              } else {
                stack.push(value);
                break;
              }
            }
          }
        }

      } else if (value.equals("(")){
        stack.push(value);
      } else if (value.equals(")")){
        while(!stack.empty()){
          if (stack.peek().equals("(")){
            stack.pop();
            break;
          } else {
            postFix.add(stack.pop());
          }
        }
      }
     }

   }

  static final public boolean emptyFile() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
         {if (true) return true;}
      break;
    default:
      jj_la1[0] = jj_gen;
   {if (true) return false;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void StartAnalyzer() throws ParseException {
                        Token err;
    if (emptyFile()) {
      customException("0\u005cnFile is empty.");
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DEF_TOKEN:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
     lineNumber++;
      jj_consume_token(DEF_TOKEN);
      jj_consume_token(SPACE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAIN_TOKEN:
        MainMethod();
        break;
      case FUNC_NAME:
        Method();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(EOL);
    }
    jj_consume_token(0);
    if (!mainExists){
      customException("0\u005cnError. Function MAIN is not defined.");
    }

    for (String call : callExists.keySet()){
      if (call.equals("MAIN")){
        customException("\u005cnError. MAIN function cannot be called.");
      }
      if(!functionsMap.containsKey(call)){
        int lineNum = callExists.get(call);
        customException(lineNum + "\u005cnError. Function call " + call + " does not exist.");
      }
    }
    callExists.clear();
  }

  static final public void MainMethod() throws ParseException {
                    Token mainT;
    if (mainExists) {
      customException(lineNumber + "\u005cnError. Function MAIN is defined more than once.");
    } else {
      mainExists = true;
    }
    mainT = jj_consume_token(MAIN_TOKEN);
                      functionsMap.put(mainT.image, new ArrayList<String>());
    jj_consume_token(SPACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 9:
      jj_consume_token(9);
      break;
    case PARAM_NAME:
      jj_consume_token(PARAM_NAME);
                  customException(lineNumber + "\u005cnError. MAIN function cannot have any parameters.");
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SPACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_NAME:
    case FUNC_NAME:
    case NUM:
      MethodBody(mainT, mainT);
      break;
    default:
      jj_la1[4] = jj_gen;
     customException(lineNumber + "\u005cnError. Function body cannot be empty.");
    }
    jj_consume_token(SPACE);
    jj_consume_token(10);
    jj_consume_token(SPACE);
    jj_consume_token(11);
  }

  static final public void Method() throws ParseException {
                 Token parameter, funcName;
    funcName = jj_consume_token(FUNC_NAME);
    if (functionsMap.containsKey(funcName.image)){
      customException(lineNumber + "\u005cnError. Function " + funcName.image + " is defined more than once.");
    } else {
      functionsMap.put(funcName.image, new ArrayList<String>());
    }
    jj_consume_token(SPACE);
    parameter = jj_consume_token(PARAM_NAME);
    jj_consume_token(SPACE);
    jj_consume_token(9);
    jj_consume_token(SPACE);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PARAM_NAME:
    case FUNC_NAME:
    case NUM:
      MethodBody(parameter, funcName);
      break;
    default:
      jj_la1[5] = jj_gen;
     customException(lineNumber + "\u005cnError. Function body cannot be empty.");
    }
    jj_consume_token(SPACE);
    jj_consume_token(10);
    jj_consume_token(SPACE);
    jj_consume_token(11);
  }

  static final public void MethodBody(Token parameter, Token funcName) throws ParseException {
                                                   Token arg, num, callname, open, add, mul, close;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = jj_consume_token(NUM);
                 updateMap(funcName, num);
      break;
    case PARAM_NAME:
      arg = jj_consume_token(PARAM_NAME);
      if (!arg.image.equals(parameter.image)) {
        if (parameter.image.equals("MAIN")){
          customException(lineNumber + "\u005cnError. MAIN function cannot have any parameters.");
        }
        customException(lineNumber + "\u005cnError. Argument has to be the same as parameter of the method.");
      }
     updateMap(funcName, arg);
      break;
    case FUNC_NAME:
      callname = jj_consume_token(FUNC_NAME);
      open = jj_consume_token(12);
                 updateMap(funcName, callname); updateMap(funcName, open); updateCall(callname, lineNumber);
      if (jj_2_1(2)) {
        arg = jj_consume_token(PARAM_NAME);
                            updateMap(funcName, arg);
          if (!arg.image.equals(parameter.image)) {
            if (parameter.image.equals("MAIN")){
              {if (true) throw new ParseException(lineNumber + "\u005cnError. MAIN function cannot have any parameters.");}
            }
            {if (true) throw new ParseException(lineNumber + "\u005cnError. Argument has to be the same as parameter of the method.");}
          }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PARAM_NAME:
        case FUNC_NAME:
        case NUM:
          MethodBody(parameter, funcName);
          break;
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
        case 14:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 13:
          add = jj_consume_token(13);
                   updateMap(funcName, add);
          break;
        case 14:
          mul = jj_consume_token(14);
                   updateMap(funcName, mul);
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MethodBody(parameter, funcName);
      }
      close = jj_consume_token(15);
                 updateMap(funcName, close);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 13:
        add = jj_consume_token(13);
                             updateMap(funcName, add);
        break;
      case 14:
        mul = jj_consume_token(14);
               updateMap(funcName, mul);
        break;
      default:
        jj_la1[10] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      MethodBody(parameter, funcName);
    }
  }

  static final public void updateMap(Token name, Token val) throws ParseException {
    functionsMap.get(name.image).add(val.image);
  }

  static final public void updateCall(Token name, int lineNumber) throws ParseException {
    if (callExists.isEmpty()){
      callExists.put(name.image, lineNumber);
      {if (true) return;}
    } else if (!callExists.containsKey(name.image)){
      callExists.put(name.image, lineNumber);
    }
  }

  static final public void customException(String message) throws ParseException {
    System.out.println("FAIL");
    System.err.println(message);
    System.exit(0);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(PARAM_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(13)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(14)) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_scan_token(FUNC_NAME)) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(PARAM_NAME)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public AssignmentTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0x4,0x50,0x220,0xe0,0xe0,0xe0,0x6000,0x6000,0xe0,0x6000,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[2];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Assignment(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Assignment(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Assignment(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new AssignmentTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Assignment(AssignmentTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(AssignmentTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[16];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 16; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
